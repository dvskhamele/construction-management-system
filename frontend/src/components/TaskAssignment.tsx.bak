'use client'

import React, { useState, useEffect } from 'react'

interface User {
  id: number;
  name: string;
  role: string;
  status: string;
  availability: string;
}

interface Task {
  id: number;
  title: string;
  description: string;
  priority: string;
  status: string;
  assignedTo: string;
  dueDate: string;
  createdAt: string;
  updatedAt: string;
}

interface TaskAssignmentProps {
  currentUserRole: string;
}

const TaskAssignment: React.FC<TaskAssignmentProps> = ({ currentUserRole }) => {
  const [users, setUsers] = useState<User[]>([]);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [selectedTask, setSelectedTask] = useState<number | null>(null);
  const [selectedUser, setSelectedUser] = useState<number | null>(null);
  const [isAssigning, setIsAssigning] = useState(false);

  useEffect(() => {
    // Fetch users and tasks from localStorage or API
    const storedUsers = localStorage.getItem('constructionTeam');
    const storedTasks = localStorage.getItem('constructionTasks');
    
    if (storedUsers) {
      setUsers(JSON.parse(storedUsers).team);
    } else {
      // Mock data for users
      setUsers([
        { id: 1, name: 'John Smith', role: 'Project Manager', status: 'ACTIVE', availability: 'FULL_TIME' },
        { id: 2, name: 'Sarah Johnson', role: 'Electrician', status: 'ACTIVE', availability: 'FULL_TIME' },
        { id: 3, name: 'Robert Davis', role: 'Plumber', status: 'ON_LEAVE', availability: 'UNAVAILABLE' },
        { id: 4, name: 'Maria Garcia', role: 'Architect', status: 'ACTIVE', availability: 'PART_TIME' },
        { id: 5, name: 'David Wilson', role: 'Carpenter', status: 'ACTIVE', availability: 'FULL_TIME' },
        { id: 6, name: 'James Brown', role: 'Site Supervisor', status: 'ACTIVE', availability: 'FULL_TIME' }
      ]);
    }
    
    if (storedTasks) {
      setTasks(JSON.parse(storedTasks).tasks);
    } else {
      // Mock data for tasks
      setTasks([
        {
          id: 1,
          title: 'Foundation Work',
          description: 'Pour concrete for foundation',
          priority: 'HIGH',
          status: 'ASSIGNED',
          assignedTo: 'John Smith',
          dueDate: '2025-02-15',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        },
        {
          id: 2,
          title: 'Electrical Installation',
          description: 'Install electrical wiring on second floor',
          priority: 'MEDIUM',
          status: 'PENDING',
          assignedTo: 'Unassigned',
          dueDate: '2025-03-20',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        },
        {
          id: 3,
          title: 'Design Approval',
          description: 'Get architect approval for plans',
          priority: 'LOW',
          status: 'REVIEW',
          assignedTo: 'Maria Garcia',
          dueDate: '2025-04-10',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
      ]);
    }
  }, []);

  const handleAssignTask = () => {
    if (selectedTask === null || selectedUser === null) return;

    setIsAssigning(true);
    
    // Find the task and user
    const taskIndex = tasks.findIndex(task => task.id === selectedTask);
    const userIndex = users.findIndex(user => user.id === selectedUser);
    
    if (taskIndex !== -1 && userIndex !== -1) {
      const updatedTasks = [...tasks];
      updatedTasks[taskIndex] = {
        ...updatedTasks[taskIndex],
        assignedTo: users[userIndex].name,
        status: 'ASSIGNED'
      };
      
      setTasks(updatedTasks);
      
      // Update localStorage
      localStorage.setItem('constructionTasks', JSON.stringify({ tasks: updatedTasks }));
    }
    
    setIsAssigning(false);
    setSelectedTask(null);
    setSelectedUser(null);
  };

  // Filter users based on role for assignment
  const filteredUsers = users.filter(user => {
    if (currentUserRole === 'ADMIN') return true;
    if (currentUserRole === 'PROJECT_MANAGER') return true;
    if (currentUserRole === 'SITE_SUPERVISOR') {
      // Site supervisor can assign to their own team members
      return ['Electrician', 'Plumber', 'Carpenter', 'Architect'].includes(user.role);
    }
    return false;
  });

  // Filter tasks that can be assigned based on role
  const filterAssignableTasks = () => {
    if (currentUserRole === 'ADMIN' || currentUserRole === 'PROJECT_MANAGER') {
      return tasks.filter(task => task.status !== 'COMPLETED');
    }
    if (currentUserRole === 'SITE_SUPERVISOR') {
      // Site supervisor can only assign tasks related to their sites
      return tasks.filter(task => 
        task.status !== 'COMPLETED' && 
        (task.status === 'PENDING' || task.status === 'REVIEW')
      );
    }
    return [];
  };

  const assignableTasks = filterAssignableTasks();

  return (
    <div className="bg-white rounded-2xl shadow-md p-6 card">
      <h2 className="text-xl font-semibold text-slate-800 mb-4">Task Assignment</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Task Selection */}
        <div>
          <h3 className="font-medium text-slate-700 mb-2">Select Task</h3>
          <div className="space-y-3 max-h-60 overflow-y-auto pr-2">
            {assignableTasks.map(task => (
              <div 
                key={task.id} 
                className={`p-3 border rounded-lg cursor-pointer transition-all ${
                  selectedTask === task.id 
                    ? 'border-teal-500 bg-teal-50' 
                    : 'border-slate-200 hover:bg-slate-50'
                }`}
                onClick={() => setSelectedTask(task.id)}
              >
                <div className="flex justify-between items-start">
                  <div>
                    <h4 className="font-medium text-slate-800">{task.title}</h4>
                    <p className="text-sm text-slate-600 mt-1 line-clamp-1">{task.description}</p>
                  </div>
                  <span className={`px-2 py-1 rounded-full text-xs ${
                    task.priority === 'HIGH' ? 'bg-rose-100 text-rose-800' :
                    task.priority === 'MEDIUM' ? 'bg-amber-100 text-amber-800' :
                    'bg-green-100 text-green-800'
                  }`}>
                    {task.priority}
                  </span>
                </div>
                <div className="flex justify-between text-xs text-slate-500 mt-2">
                  <span>{task.assignedTo}</span>
                  <span>Due: {new Date(task.dueDate).toLocaleDateString()}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        {/* User Selection */}
        <div>
          <h3 className="font-medium text-slate-700 mb-2">Assign To</h3>
          <div className="space-y-3 max-h-60 overflow-y-auto pr-2">
            {filteredUsers.map(user => (
              <div 
                key={user.id} 
                className={`p-3 border rounded-lg cursor-pointer transition-all ${
                  selectedUser === user.id 
                    ? 'border-teal-500 bg-teal-50' 
                    : 'border-slate-200 hover:bg-slate-50'
                }`}
                onClick={() => setSelectedUser(user.id)}
              >
                <div className="flex items-center">
                  <div className="w-8 h-8 rounded-full bg-gradient-to-br from-teal-400 to-teal-600 flex items-center justify-center text-white font-bold text-sm">
                    {user.name.charAt(0)}
                  </div>
                  <div className="ml-3">
                    <h4 className="font-medium text-slate-800">{user.name}</h4>
                    <p className="text-xs text-slate-600">{user.role}</p>
                  </div>
                  <span className={`ml-auto px-2 py-1 rounded-full text-xs ${
                    user.status === 'ACTIVE' ? 'bg-emerald-100 text-emerald-800' :
                    user.status === 'ON_LEAVE' ? 'bg-amber-100 text-amber-800' :
                    'bg-slate-100 text-slate-800'
                  }`}>
                    {user.availability}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      {/* Assign Button */}
      <div className="mt-6 flex justify-end">
        <button
          onClick={handleAssignTask}
          disabled={selectedTask === null || selectedUser === null || isAssigning}
          className={`px-4 py-2 rounded-lg font-medium ${
            selectedTask !== null && selectedUser !== null && !isAssigning
              ? 'bg-teal-600 text-white hover:bg-teal-700'
              : 'bg-slate-200 text-slate-500 cursor-not-allowed'
          }`}
        >
          {isAssigning ? 'Assigning...' : 'Assign Task'}
        </button>
      </div>
    </div>
  )
}

export default TaskAssignment