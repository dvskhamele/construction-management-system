'use client'

import React, { useState, useEffect } from 'react'
import Header from '../../components/Header'
import apiService from '../../utils/constructionApiService'

export default function SiteDetails() {
  const [sites, setSites] = useState<any[]>([])
  const [selectedStatus, setSelectedStatus] = useState('')
  const [selectedLocation, setSelectedLocation] = useState('')
  const [sortBy, setSortBy] = useState('name')
  const [sortOrder, setSortOrder] = useState('asc')
  const [stats, setStats] = useState({ active: 0, planning: 0, completed: 0, onHold: 0, total: 0 })
  const [user, setUser] = useState<any>(null)
  const [searchTerm, setSearchTerm] = useState('')
  const [showAddSiteModal, setShowAddSiteModal] = useState(false)
  const [showEditSiteModal, setShowEditSiteModal] = useState(false)
  const [newSite, setNewSite] = useState({
    name: '',
    location: 'Delhi',
    type: 'Residential',
    status: 'PLANNING',
    budget: 5000000,
    startDate: '',
    endDate: ''
  })
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')

  useEffect(() => {
    const token = localStorage.getItem('token')
    if (token) {
      setUser({ name: 'Admin User', role: 'ADMIN' } as any)
      fetchProperties()
    }
  }, [])

    const fetchProperties = async () => {
    try {
      setLoading(true);
      // Mock API service call since the original one was for rooms
      // In a real app, you would call apiService.getSites();
      const siteData = { 
        sites: []
      };
      
      // Use mock data to simulate construction sites
      const mockSites = [
        { 
          id: 1, 
          name: 'Downtown Office Complex - Site A', 
          project: 'Downtown Office Complex',
          location: 'Downtown District, New York', 
          status: 'ACTIVE', 
          supervisor: 'John Smith',
          crewSize: 12,
          startDate: '2025-01-15',
          endDate: '2025-09-30',
          progress: 75,
          safetyRating: 92,
          qualityRating: 88,
          issues: 3,
          safetyIncidents: 1,
          lastInspection: '2025-03-17',
          nextInspection: '2025-03-24'
        },
        { 
          id: 2, 
          name: 'Residential Tower B', 
          project: 'Residential Tower B',
          location: 'Midtown, New York', 
          status: 'PLANNING', 
          supervisor: 'Sarah Johnson',
          crewSize: 0,
          startDate: '2025-05-01',
          endDate: '2026-02-28',
          progress: 0,
          safetyRating: 0,
          qualityRating: 0,
          issues: 0,
          safetyIncidents: 0,
          lastInspection: '',
          nextInspection: '2025-05-01'
        },
        { 
          id: 3, 
          name: 'Shopping Mall C', 
          project: 'Shopping Mall C',
          location: 'Uptown, New York', 
          status: 'ACTIVE', 
          supervisor: 'Robert Davis',
          crewSize: 25,
          startDate: '2024-11-01',
          endDate: '2025-08-31',
          progress: 45,
          safetyRating: 85,
          qualityRating: 90,
          issues: 7,
          safetyIncidents: 2,
          lastInspection: '2025-03-15',
          nextInspection: '2025-03-22'
        },
        { 
          id: 4, 
          name: 'Apartment Complex D', 
          project: 'Apartment Complex D',
          location: 'Downtown, Chicago', 
          status: 'COMPLETED', 
          supervisor: 'Maria Garcia',
          crewSize: 0,
          startDate: '2024-01-15',
          endDate: '2025-01-10',
          progress: 100,
          safetyRating: 95,
          qualityRating: 92,
          issues: 0,
          safetyIncidents: 0,
          lastInspection: '2025-01-05',
          nextInspection: ''
        }
      ];
      
      setSites(mockSites);
      
      // Calculate stats
      const active = mockSites.filter((s: any) => s.status === 'ACTIVE').length;
      const planning = mockSites.filter((s: any) => s.status === 'PLANNING').length;
      const completed = mockSites.filter((s: any) => s.status === 'COMPLETED').length;
      const onHold = mockSites.filter((s: any) => s.status === 'ON_HOLD').length;
      setStats({ active, planning, completed, onHold, total: mockSites.length });
      setError('');
    } catch (err) {
      console.error('Error fetching sites:', err);
      setError('This is a Demo version - In the real version, you will get actual data from the backend');
      
      // Use mock data if API fails
      const mockSites = [
        { 
          id: 1, 
          name: 'Downtown Office Complex - Site A', 
          project: 'Downtown Office Complex',
          location: 'Downtown District, New York', 
          status: 'ACTIVE', 
          supervisor: 'John Smith',
          crewSize: 12,
          startDate: '2025-01-15',
          endDate: '2025-09-30',
          progress: 75,
          safetyRating: 92,
          qualityRating: 88,
          issues: 3,
          safetyIncidents: 1,
          lastInspection: '2025-03-17',
          nextInspection: '2025-03-24'
        },
        { 
          id: 2, 
          name: 'Residential Tower B', 
          project: 'Residential Tower B',
          location: 'Midtown, New York', 
          status: 'PLANNING', 
          supervisor: 'Sarah Johnson',
          crewSize: 0,
          startDate: '2025-05-01',
          endDate: '2026-02-28',
          progress: 0,
          safetyRating: 0,
          qualityRating: 0,
          issues: 0,
          safetyIncidents: 0,
          lastInspection: '',
          nextInspection: '2025-05-01'
        },
        { 
          id: 3, 
          name: 'Shopping Mall C', 
          project: 'Shopping Mall C',
          location: 'Uptown, New York', 
          status: 'ACTIVE', 
          supervisor: 'Robert Davis',
          crewSize: 25,
          startDate: '2024-11-01',
          endDate: '2025-08-31',
          progress: 45,
          safetyRating: 85,
          qualityRating: 90,
          issues: 7,
          safetyIncidents: 2,
          lastInspection: '2025-03-15',
          nextInspection: '2025-03-22'
        },
        { 
          id: 4, 
          name: 'Apartment Complex D', 
          project: 'Apartment Complex D',
          location: 'Downtown, Chicago', 
          status: 'COMPLETED', 
          supervisor: 'Maria Garcia',
          crewSize: 0,
          startDate: '2024-01-15',
          endDate: '2025-01-10',
          progress: 100,
          safetyRating: 95,
          qualityRating: 92,
          issues: 0,
          safetyIncidents: 0,
          lastInspection: '2025-01-05',
          nextInspection: ''
        }
      ];
      
      setSites(mockSites);
      
      // Calculate stats
      const active = mockSites.filter((s: any) => s.status === 'ACTIVE').length;
      const planning = mockSites.filter((s: any) => s.status === 'PLANNING').length;
      const completed = mockSites.filter((s: any) => s.status === 'COMPLETED').length;
      const onHold = mockSites.filter((s: any) => s.status === 'ON_HOLD').length;
      setStats({ active, planning, completed, onHold, total: mockSites.length });
    } finally {
      setLoading(false);
    }
  };

  const updateSiteStatus = async (siteId: number, newStatus: string) => {
    try {
      // In a real app, this would call an API
      // await apiService.updateSiteStatus(siteId, newStatus);
      
      // Update local state
      setSites(sites.map((site: any) => 
        site.id === siteId ? { ...site, status: newStatus, updatedAt: new Date().toISOString() } : site
      ));
      
      // Update stats
      const updatedSites = sites.map((site: any) => 
        site.id === siteId ? { ...site, status: newStatus } : site
      );
      
      const active = updatedSites.filter((s: any) => s.status === 'ACTIVE').length;
      const planning = updatedSites.filter((s: any) => s.status === 'PLANNING').length;
      const completed = updatedSites.filter((s: any) => s.status === 'COMPLETED').length;
      const onHold = updatedSites.filter((s: any) => s.status === 'ON_HOLD').length;
      setStats({ active, planning, completed, onHold, total: updatedSites.length });
      
      // Show success message
      setError('This is a Demo version - Changes saved successfully in localStorage');
    } catch (error) {
      console.error('Error updating property status:', error);
      setError('This is a Demo version - In the real version, you will get actual data from the backend');
      
      // Update local state even if API fails (for demo purposes)
      setSites(sites.map((site: any) => 
        site.id === siteId ? { ...site, status: newStatus, updatedAt: new Date().toISOString() } : site
      ));
      
      // Update stats
      const updatedSites = sites.map((site: any) => 
        site.id === siteId ? { ...site, status: newStatus } : site
      );
      
      const active = updatedSites.filter((s: any) => s.status === 'ACTIVE').length;
      const planning = updatedSites.filter((s: any) => s.status === 'PLANNING').length;
      const completed = updatedSites.filter((s: any) => s.status === 'COMPLETED').length;
      const onHold = updatedSites.filter((s: any) => s.status === 'ON_HOLD').length;
      setStats({ active, planning, completed, onHold, total: updatedSites.length });
    }
  };

  const getStatusClass = (status: string) => {
    switch (status) {
      case 'AVAILABLE':
        return 'bg-emerald-100 text-emerald-800'
      case 'UNDER_CONTRACT':
        return 'bg-amber-100 text-amber-800'
      case 'SOLD':
        return 'bg-blue-100 text-blue-800'
      case 'UPCOMING':
        return 'bg-purple-100 text-purple-800'
      default:
        return 'bg-gray-100 text-gray-800'
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case 'AVAILABLE':
        return 'Available'
      case 'UNDER_CONTRACT':
        return 'Under Contract'
      case 'SOLD':
        return 'Sold'
      case 'UPCOMING':
        return 'Upcoming'
      default:
        return status
    }
  }

  // Format currency
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      maximumFractionDigits: 0
    }).format(amount);
  }

  // Filter sites based on selected status, location, and search term
  const filteredSites = sites.filter(site => {
    const statusMatch = selectedStatus ? site.status === selectedStatus : true
    const locationMatch = selectedLocation ? site.location === selectedLocation : true
    const searchMatch = searchTerm 
      ? site.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
        site.location.toLowerCase().includes(searchTerm.toLowerCase()) ||
        site.project.toLowerCase().includes(searchTerm.toLowerCase())
      : true
    return statusMatch && locationMatch && searchMatch
  })

  // Sort sites
  const sortedSites = [...filteredSites].sort((a, b) => {
    if (sortOrder === 'asc') {
      return a[sortBy] > b[sortBy] ? 1 : -1
    } else {
      return a[sortBy] < b[sortBy] ? 1 : -1
    }
  })

  const handleLogout = () => {
    localStorage.removeItem('token')
    window.location.href = '/'
  }

  const handleAddProperty = () => {
    // In a real app, you would call the API to add a property
    // For now, we'll just add to the local state
    const newId = properties.length > 0 ? Math.max(...properties.map((p: any) => p.id)) + 1 : 1
    const propertyToAdd = {
      ...newProperty,
      id: newId,
      area: 1500, // Default area
      updatedAt: new Date().toISOString()
    }
    
    setSites([...sites, siteToAdd])
    
    // Update stats
    const available = newProperty.status === 'AVAILABLE' ? stats.available + 1 : stats.available
    const underContract = newProperty.status === 'UNDER_CONTRACT' ? stats.underContract + 1 : stats.underContract
    const sold = newProperty.status === 'SOLD' ? stats.sold + 1 : stats.sold
    const upcoming = newProperty.status === 'UPCOMING' ? stats.upcoming + 1 : stats.upcoming
    setStats({ available, underContract, sold, upcoming, total: stats.total + 1 })
    
    // Reset form and close modal
    setNewProperty({
      name: '',
      location: 'Delhi',
      type: 'Apartment',
      status: 'AVAILABLE',
      price: 5000000,
      bedrooms: 2,
      bathrooms: 2
    })
    setShowAddPropertyModal(false)
  }

  // Function to get site status icon
  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'ACTIVE':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-emerald-500" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
          </svg>
        )
      case 'PLANNING':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-amber-500" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
          </svg>
        )
      case 'COMPLETED':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
            <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" />
            <path fillRule="evenodd" d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z" clipRule="evenodd" />
          </svg>
        )
      case 'ON_HOLD':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-purple-500" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd" />
          </svg>
        )
      default:
        return null
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-500"></div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      <Header user={user} onLogout={handleLogout} />

      <main className="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
        <div className="mb-6 flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div>
            <h2 className="text-2xl font-bold text-slate-800">Site Management</h2>
            <p className="text-slate-600">Manage construction sites and project status</p>
          </div>
          <button 
            className="bg-gradient-to-r from-teal-500 to-teal-600 text-white py-2 px-4 rounded-lg hover:from-teal-600 hover:to-teal-700 transition duration-300 shadow-md flex items-center"
            onClick={() => setShowAddPropertyModal(true)}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
            </svg>
            Add New Property
          </button>
        </div>

        {error && (
          <div className="bg-amber-50 text-amber-700 p-4 rounded-lg mb-6">
            {error}
          </div>
        )}

        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          <div className="bg-white rounded-xl shadow p-4 text-center border-l-4 border-slate-500">
            <p className="text-2xl font-bold text-slate-800">{stats.total}</p>
            <p className="text-sm text-slate-600">Total Sites</p>
          </div>
          <div className="bg-emerald-50 rounded-xl shadow p-4 text-center border-l-4 border-emerald-500">
            <p className="text-2xl font-bold text-emerald-700">{stats.active}</p>
            <p className="text-sm text-emerald-600">Active</p>
          </div>
          <div className="bg-amber-50 rounded-xl shadow p-4 text-center border-l-4 border-amber-500">
            <p className="text-2xl font-bold text-amber-700">{stats.planning}</p>
            <p className="text-sm text-amber-600">Planning</p>
          </div>
          <div className="bg-blue-50 rounded-xl shadow p-4 text-center border-l-4 border-blue-500">
            <p className="text-2xl font-bold text-blue-700">{stats.completed}</p>
            <p className="text-sm text-blue-600">Completed</p>
          </div>
        </div>

        {/* Quick Filters */}
        <div className="bg-white rounded-xl shadow p-4 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            <div>
              <label htmlFor="search" className="block text-sm font-medium text-slate-700 mb-1">Search</label>
              <input
                type="text"
                className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-slate-800 bg-white"
                placeholder="Site name, location, or project"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <div>
              <label htmlFor="statusFilter" className="block text-sm font-medium text-slate-700 mb-1">Status</label>
              <select
                id="statusFilter"
                className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-slate-800 bg-white"
                value={selectedStatus}
                onChange={(e) => setSelectedStatus(e.target.value)}
              >
                <option value="">All Statuses</option>
                <option value="ACTIVE">Active</option>
                <option value="PLANNING">Planning</option>
                <option value="COMPLETED">Completed</option>
                <option value="ON_HOLD">On Hold</option>
              </select>
            </div>
            <div>
              <label htmlFor="locationFilter" className="block text-sm font-medium text-slate-700 mb-1">Location</label>
              <select
                id="locationFilter"
                className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-slate-800 bg-white"
                value={selectedLocation}
                onChange={(e) => setSelectedLocation(e.target.value)}
              >
                <option value="">All Locations</option>
                <option value="South Delhi">South Delhi</option>
                <option value="Connaught Place">Connaught Place</option>
                <option value="Lutyens Zone">Lutyens Zone</option>
                <option value="Gurgaon">Gurgaon</option>
                <option value="Noida">Noida</option>
                <option value="Dwarka">Dwarka</option>
                <option value="Greater Kailash">Greater Kailash</option>
                <option value="New Delhi">New Delhi</option>
              </select>
            </div>
            <div>
              <label htmlFor="sortBy" className="block text-sm font-medium text-slate-700 mb-1">Sort By</label>
              <select
                id="sortBy"
                className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-slate-800 bg-white"
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
              >
                <option value="name">Property Name</option>
                <option value="location">Location</option>
                <option value="price">Price</option>
                <option value="type">Type</option>
              </select>
            </div>
            <div className="flex items-end">
              <button 
                className="w-full bg-slate-100 text-slate-700 py-2 px-4 rounded-lg hover:bg-slate-200 transition duration-300"
                onClick={() => {
                  setSelectedStatus('')
                  setSelectedLocation('')
                  setSearchTerm('')
                  setSortBy('name')
                  setSortOrder('asc')
                }}
              >
                Clear Filters
              </button>
            </div>
          </div>
        </div>

        {/* Property Grid Visualization */}
        <div className="bg-white rounded-xl shadow p-6 mb-8">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold text-slate-800">Property Overview</h3>
            <div className="flex items-center space-x-2">
              <span className="text-sm text-slate-600">Sort:</span>
              <button 
                className={`text-xs px-2 py-1 rounded ${sortOrder === 'asc' ? 'bg-teal-100 text-teal-800' : 'bg-slate-100 text-slate-600'}`}
                onClick={() => setSortOrder('asc')}
              >
                Asc
              </button>
              <button 
                className={`text-xs px-2 py-1 rounded ${sortOrder === 'desc' ? 'bg-teal-100 text-teal-800' : 'bg-slate-100 text-slate-600'}`}
                onClick={() => setSortOrder('desc')}
              >
                Desc
              </button>
            </div>
          </div>
          
          {/* Property Grid Visualization */}
          <div className="mb-6">
            {/* Location Selector */}
            <div className="flex flex-wrap gap-2 mb-4">
              {['South Delhi', 'Connaught Place', 'Lutyens Zone', 'Gurgaon', 'Noida', 'Dwarka', 'Greater Kailash', 'New Delhi'].map((location) => (
                <button
                  key={location}
                  className={`px-4 py-2 rounded-lg transition-colors ${
                    selectedLocation === location || selectedLocation === ''
                      ? 'bg-teal-500 text-white'
                      : 'bg-slate-100 text-slate-700 hover:bg-slate-200'
                  }`}
                  onClick={() => setSelectedLocation(selectedLocation === location ? '' : location)}
                >
                  {location}
                </button>
              ))}
            </div>
            
            {/* Interactive Property Map */}
            <div className="border border-slate-200 rounded-xl p-6 bg-slate-50 relative">
              {/* Legend */}
              <div className="flex flex-wrap gap-4 mb-6">
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-emerald-500 rounded mr-2"></div>
                  <span className="text-sm text-slate-700">Available</span>
                </div>
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-amber-500 rounded mr-2"></div>
                  <span className="text-sm text-slate-700">Under Contract</span>
                </div>
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-blue-500 rounded mr-2"></div>
                  <span className="text-sm text-slate-700">Sold</span>
                </div>
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-purple-500 rounded mr-2"></div>
                  <span className="text-sm text-slate-700">Upcoming</span>
                </div>
              </div>
              
              {/* Property Map Visualization */}
              <div className="relative">
                {/* Available Properties */}
                {(!selectedStatus || selectedStatus === 'AVAILABLE') && (
                  <div className={`mb-8 ${selectedStatus && selectedStatus !== 'AVAILABLE' ? 'opacity-50' : ''}`}>
                    <h4 className="text-md font-medium text-slate-800 mb-3">Available Properties</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                      {sortedProperties
                        .filter((property) => property.status === 'AVAILABLE')
                        .map((property) => (
                          <div
                            key={property.id}
                            className={`rounded-xl p-4 border-2 transition-all duration-300 hover:shadow-md cursor-pointer transform hover:-translate-y-1 ${
                              property.status === 'AVAILABLE'
                                ? 'border-emerald-200 bg-emerald-50 hover:bg-emerald-100'
                                : property.status === 'UNDER_CONTRACT'
                                ? 'border-amber-200 bg-amber-50 hover:bg-amber-100'
                                : property.status === 'SOLD'
                                ? 'border-blue-200 bg-blue-50 hover:bg-blue-100'
                                : 'border-purple-200 bg-purple-50 hover:bg-purple-100'
                            }`}
                            onClick={() => updatePropertyStatus(property.id, property.status === 'AVAILABLE' ? 'UNDER_CONTRACT' : property.status === 'UNDER_CONTRACT' ? 'SOLD' : property.status === 'SOLD' ? 'AVAILABLE' : 'UNDER_CONTRACT')}
                          >
                            <div className="flex justify-between items-start">
                              <div>
                                <h4 className="font-bold text-slate-800">{property.name}</h4>
                                <p className="text-sm text-slate-600">{property.location}</p>
                              </div>
                              <div
                                className={`p-1 rounded-full ${
                                  property.status === 'AVAILABLE'
                                    ? 'bg-emerald-100'
                                    : property.status === 'UNDER_CONTRACT'
                                    ? 'bg-amber-100'
                                    : property.status === 'SOLD'
                                    ? 'bg-blue-100'
                                    : 'bg-purple-100'
                                }`}
                              >
                                {getStatusIcon(property.status)}
                              </div>
                            </div>
                            <div className="mt-3">
                              <div className="text-lg font-bold text-slate-800">{formatCurrency(property.price)}</div>
                              <div className="text-sm text-slate-600">{property.bedrooms} BHK | {property.area} sqft</div>
                            </div>
                            <div className="mt-3">
                              <span
                                className={`px-2 py-1 text-xs rounded-full ${getStatusClass(property.status)}`}
                              >
                                {getStatusText(property.status)}
                              </span>
                            </div>
                            <div className="mt-2 text-xs text-slate-500">
                              Click to change status
                            </div>
                          </div>
                        ))}
                    </div>
                  </div>
                )}
                
                {/* Under Contract Properties */}
                {(!selectedStatus || selectedStatus === 'UNDER_CONTRACT') && (
                  <div className={`mb-8 ${selectedStatus && selectedStatus !== 'UNDER_CONTRACT' ? 'opacity-50' : ''}`}>
                    <h4 className="text-md font-medium text-slate-800 mb-3">Under Contract Properties</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                      {sortedProperties
                        .filter((property) => property.status === 'UNDER_CONTRACT')
                        .map((property) => (
                          <div
                            key={property.id}
                            className={`rounded-xl p-4 border-2 transition-all duration-300 hover:shadow-md cursor-pointer transform hover:-translate-y-1 ${
                              property.status === 'AVAILABLE'
                                ? 'border-emerald-200 bg-emerald-50 hover:bg-emerald-100'
                                : property.status === 'UNDER_CONTRACT'
                                ? 'border-amber-200 bg-amber-50 hover:bg-amber-100'
                                : property.status === 'SOLD'
                                ? 'border-blue-200 bg-blue-50 hover:bg-blue-100'
                                : 'border-purple-200 bg-purple-50 hover:bg-purple-100'
                            }`}
                            onClick={() => updatePropertyStatus(property.id, property.status === 'AVAILABLE' ? 'UNDER_CONTRACT' : property.status === 'UNDER_CONTRACT' ? 'SOLD' : property.status === 'SOLD' ? 'AVAILABLE' : 'UNDER_CONTRACT')}
                          >
                            <div className="flex justify-between items-start">
                              <div>
                                <h4 className="font-bold text-slate-800">{property.name}</h4>
                                <p className="text-sm text-slate-600">{property.location}</p>
                              </div>
                              <div
                                className={`p-1 rounded-full ${
                                  property.status === 'AVAILABLE'
                                    ? 'bg-emerald-100'
                                    : property.status === 'UNDER_CONTRACT'
                                    ? 'bg-amber-100'
                                    : property.status === 'SOLD'
                                    ? 'bg-blue-100'
                                    : 'bg-purple-100'
                                }`}
                              >
                                {getStatusIcon(property.status)}
                              </div>
                            </div>
                            <div className="mt-3">
                              <div className="text-lg font-bold text-slate-800">{formatCurrency(property.price)}</div>
                              <div className="text-sm text-slate-600">{property.bedrooms} BHK | {property.area} sqft</div>
                            </div>
                            <div className="mt-3">
                              <span
                                className={`px-2 py-1 text-xs rounded-full ${getStatusClass(property.status)}`}
                              >
                                {getStatusText(property.status)}
                              </span>
                            </div>
                            <div className="mt-2 text-xs text-slate-500">
                              Click to change status
                            </div>
                          </div>
                        ))}
                    </div>
                  </div>
                )}
                
                {/* Sold Properties */}
                {(!selectedStatus || selectedStatus === 'SOLD') && (
                  <div className={`mb-8 ${selectedStatus && selectedStatus !== 'SOLD' ? 'opacity-50' : ''}`}>
                    <h4 className="text-md font-medium text-slate-800 mb-3">Sold Properties</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                      {sortedProperties
                        .filter((property) => property.status === 'SOLD')
                        .map((property) => (
                          <div
                            key={property.id}
                            className={`rounded-xl p-4 border-2 transition-all duration-300 hover:shadow-md cursor-pointer transform hover:-translate-y-1 ${
                              property.status === 'AVAILABLE'
                                ? 'border-emerald-200 bg-emerald-50 hover:bg-emerald-100'
                                : property.status === 'UNDER_CONTRACT'
                                ? 'border-amber-200 bg-amber-50 hover:bg-amber-100'
                                : property.status === 'SOLD'
                                ? 'border-blue-200 bg-blue-50 hover:bg-blue-100'
                                : 'border-purple-200 bg-purple-50 hover:bg-purple-100'
                            }`}
                          >
                            <div className="flex justify-between items-start">
                              <div>
                                <h4 className="font-bold text-slate-800">{property.name}</h4>
                                <p className="text-sm text-slate-600">{property.location}</p>
                              </div>
                              <div
                                className={`p-1 rounded-full ${
                                  property.status === 'AVAILABLE'
                                    ? 'bg-emerald-100'
                                    : property.status === 'UNDER_CONTRACT'
                                    ? 'bg-amber-100'
                                    : property.status === 'SOLD'
                                    ? 'bg-blue-100'
                                    : 'bg-purple-100'
                                }`}
                              >
                                {getStatusIcon(property.status)}
                              </div>
                            </div>
                            <div className="mt-3">
                              <div className="text-lg font-bold text-slate-800">{formatCurrency(property.price)}</div>
                              <div className="text-sm text-slate-600">{property.bedrooms} BHK | {property.area} sqft</div>
                            </div>
                            <div className="mt-3">
                              <span
                                className={`px-2 py-1 text-xs rounded-full ${getStatusClass(property.status)}`}
                              >
                                {getStatusText(property.status)}
                              </span>
                            </div>
                            <div className="mt-2 text-xs text-slate-500">
                              Property sold
                            </div>
                          </div>
                        ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Property Table */}
        <div className="bg-white rounded-xl shadow overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-slate-200">
              <thead className="bg-slate-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Property</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Location</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Type</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Price</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Last Updated</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-slate-200">
                {sortedProperties.map((property: any) => (
                  <tr 
                    key={property.id} 
                    className="hover:bg-slate-50 transition-all duration-300 cursor-pointer"
                    onClick={() => setShowEditPropertyModal(true)}
                  >
                    <td 
                      className="px-6 py-4 whitespace-nowrap cursor-pointer hover:bg-slate-100 transition-colors duration-200"
                      onClick={(e) => {
                        e.stopPropagation();
                        setShowEditPropertyModal(true);
                      }}
                    >
                      <div className="flex items-center">
                        <div className="flex-shrink-0 h-10 w-10 bg-gradient-to-br from-teal-400 to-teal-600 rounded-lg flex items-center justify-center">
                          <span className="text-white font-bold">{property.bedrooms}BHK</span>
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-slate-900">{property.name}</div>
                          <div className="text-sm text-slate-500">{property.bedrooms} BHK, {property.bathrooms} Bath</div>
                        </div>
                      </div>
                    </td>
                    <td 
                      className="px-6 py-4 whitespace-nowrap text-sm text-slate-600 cursor-pointer hover:bg-slate-100 transition-colors duration-200"
                      onClick={(e) => {
                        e.stopPropagation();
                        // Show location edit modal
                        alert(`Edit location for property ${property.name}`);
                      }}
                    >
                      {property.location}
                    </td>
                    <td 
                      className="px-6 py-4 whitespace-nowrap text-sm text-slate-600 cursor-pointer hover:bg-slate-100 transition-colors duration-200"
                      onClick={(e) => {
                        e.stopPropagation();
                        // Show type edit modal
                        alert(`Edit type for property ${property.name}`);
                      }}
                    >
                      {property.type}
                    </td>
                    <td 
                      className="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900 cursor-pointer hover:bg-slate-100 transition-colors duration-200"
                      onClick={(e) => {
                        e.stopPropagation();
                        // Show price edit modal
                        alert(`Edit price for property ${property.name}`);
                      }}
                    >
                      {formatCurrency(property.price)}
                    </td>
                    <td 
                      className="px-6 py-4 whitespace-nowrap cursor-pointer hover:bg-slate-100 transition-colors duration-200"
                      onClick={(e) => {
                        e.stopPropagation();
                        // Show status edit modal
                      }}
                    >
                      <span className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusClass(property.status)}`}>
                        {getStatusText(property.status)}
                      </span>
                    </td>
                    <td 
                      className="px-6 py-4 whitespace-nowrap text-sm text-slate-500 cursor-pointer hover:bg-slate-100 transition-colors duration-200"
                      onClick={(e) => {
                        e.stopPropagation();
                        // Show date edit modal
                        alert(`Last updated: ${property.updatedAt ? new Date(property.updatedAt).toLocaleString() : 'N/A'}`);
                      }}
                    >
                      {property.updatedAt ? new Date(property.updatedAt).toLocaleString() : 'N/A'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex space-x-2">
                        <select
                          className="px-3 py-1 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 text-sm text-slate-800 bg-white"
                          value={property.status}
                          onChange={(e) => updatePropertyStatus(property.id, e.target.value)}
                          onClick={(e) => e.stopPropagation()}
                        >
                          <option value="AVAILABLE">Available</option>
                          <option value="UNDER_CONTRACT">Under Contract</option>
                          <option value="SOLD">Sold</option>
                          <option value="UPCOMING">Upcoming</option>
                        </select>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </main>

      {/* Add Property Modal */}
      {showAddPropertyModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl shadow-xl w-full max-w-md">
            <div className="px-6 py-4 border-b border-slate-200 flex justify-between items-center">
              <h3 className="text-lg font-semibold text-slate-800">Add New Property</h3>
              <button 
                onClick={() => setShowAddPropertyModal(false)}
                className="text-slate-400 hover:text-slate-500"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div className="p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-1">Property Name</label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-slate-800 bg-white"
                    placeholder="Enter property name"
                    value={newProperty.name}
                    onChange={(e) => setNewProperty({...newProperty, name: e.target.value})}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-1">Location</label>
                  <select
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-slate-800 bg-white"
                    value={newProperty.location}
                    onChange={(e) => setNewProperty({...newProperty, location: e.target.value})}
                  >
                    <option value="South Delhi">South Delhi</option>
                    <option value="Connaught Place">Connaught Place</option>
                    <option value="Lutyens Zone">Lutyens Zone</option>
                    <option value="Gurgaon">Gurgaon</option>
                    <option value="Noida">Noida</option>
                    <option value="Dwarka">Dwarka</option>
                    <option value="Greater Kailash">Greater Kailash</option>
                    <option value="New Delhi">New Delhi</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-1">Property Type</label>
                  <select
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-slate-800 bg-white"
                    value={newProperty.type}
                    onChange={(e) => setNewProperty({...newProperty, type: e.target.value})}
                  >
                    <option value="Apartment">Apartment</option>
                    <option value="Villa">Villa</option>
                    <option value="Independent House">Independent House</option>
                    <option value="Floors">Floors</option>
                    <option value="Condo">Condo</option>
                    <option value="Penthouse">Penthouse</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-1">Price (₹)</label>
                  <input
                    type="number"
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-slate-800 bg-white"
                    placeholder="Enter price"
                    value={newProperty.price}
                    onChange={(e) => setNewProperty({...newProperty, price: parseInt(e.target.value)})}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">Bedrooms</label>
                    <select
                      className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-slate-800 bg-white"
                      value={newProperty.bedrooms}
                      onChange={(e) => setNewProperty({...newProperty, bedrooms: parseInt(e.target.value)})}
                    >
                      {[0, 1, 2, 3, 4, 5, 6].map(num => (
                        <option key={num} value={num}>{num} {num === 1 ? 'Bedroom' : 'Bedrooms'}</option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">Bathrooms</label>
                    <select
                      className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-slate-800 bg-white"
                      value={newProperty.bathrooms}
                      onChange={(e) => setNewProperty({...newProperty, bathrooms: parseInt(e.target.value)})}
                    >
                      {[0, 1, 2, 3, 4, 5, 6].map(num => (
                        <option key={num} value={num}>{num} {num === 1 ? 'Bathroom' : 'Bathrooms'}</option>
                      ))}
                    </select>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-1">Initial Status</label>
                  <select
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 text-slate-800 bg-white"
                    value={newProperty.status}
                    onChange={(e) => setNewProperty({...newProperty, status: e.target.value})}
                  >
                    <option value="AVAILABLE">Available</option>
                    <option value="UNDER_CONTRACT">Under Contract</option>
                    <option value="SOLD">Sold</option>
                    <option value="UPCOMING">Upcoming</option>
                  </select>
                </div>
              </div>
            </div>
            <div className="px-6 py-4 bg-slate-50 rounded-b-2xl flex justify-end space-x-3">
              <button 
                className="px-4 py-2 text-slate-700 hover:text-slate-900 font-medium rounded-lg"
                onClick={() => setShowAddPropertyModal(false)}
              >
                Cancel
              </button>
              <button 
                className="px-4 py-2 bg-gradient-to-r from-teal-500 to-teal-600 text-white font-medium rounded-lg hover:from-teal-600 hover:to-teal-700 transition duration-300"
                onClick={handleAddProperty}
              >
                Add Property
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}