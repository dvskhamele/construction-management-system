'use client'

import React, { useState, useEffect } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import UserLayout from '../../components/UserLayout'

export default function AnalyticsDashboard() {
  const [isLoggedIn, setIsLoggedIn] = useState(true)
  const [user, setUser] = useState<any>({ name: 'Analytics Manager', role: 'ADMIN' })
  const [analytics, setAnalytics] = useState({
    projectPerformance: {
      totalProjects: 42,
      activeProjects: 18,
      completedProjects: 15,
      onTimeProjects: 12,
      delayedProjects: 6,
      projectCompletionRate: 78,
      avgProjectDuration: 145,
      budgetAdherence: 87
    },
    financialMetrics: {
      totalRevenue: 2500000,
      revenueThisMonth: 450000,
      revenueLastMonth: 380000,
      budgetSpent: 1850000,
      budgetRemaining: 650000,
      avgProjectMargin: 18,
      costOverruns: 5,
      profitability: 92
    },
    resourceUtilization: {
      totalCrews: 24,
      activeCrews: 18,
      idleCrews: 6,
      totalEquipment: 32,
      equipmentUtilization: 76,
      avgCrewProductivity: 89,
      overtimeHours: 120,
      safetyIncidents: 3
    },
    qualityMetrics: {
      totalDefects: 42,
      resolvedDefects: 38,
      pendingDefects: 4,
      defectResolutionRate: 90,
      qualityRating: 87,
      reworkCosts: 25000,
      inspectionPassRate: 94,
      clientSatisfaction: 92
    }
  })
  const [timeRange, setTimeRange] = useState('30d')
  const [selectedMetric, setSelectedMetric] = useState('all')
  const [reportType, setReportType] = useState('summary')
  const [filter, setFilter] = useState('all')
  const [showReportModal, setShowReportModal] = useState(false)
  const [selectedReport, setSelectedReport] = useState<any>(null)

  const router = useRouter()

  // Mock data for reports list
  const reports = [
    { id: 1, name: 'Project Performance Report', description: 'Comprehensive analysis of project timelines and deliverables', category: 'project', lastGenerated: 'Today, 09:30 AM', frequency: 'Daily', format: 'PDF', status: 'Active', access: 'Public', views: 24, downloads: 8 },
    { id: 2, name: 'Financial Summary Report', description: 'Revenue, expenses, and profit margins analysis', category: 'finance', lastGenerated: 'Yesterday, 11:45 AM', frequency: 'Weekly', format: 'Excel', status: 'Active', access: 'Private', views: 18, downloads: 5 },
    { id: 3, name: 'Crew Productivity Report', description: 'Analysis of crew efficiency and performance metrics', category: 'operations', lastGenerated: 'Oct 15, 2025', frequency: 'Monthly', format: 'PDF', status: 'Active', access: 'Public', views: 12, downloads: 3 },
    { id: 4, name: 'Defect Analysis Report', description: 'Quality issues and resolution tracking', category: 'quality', lastGenerated: 'Oct 14, 2025', frequency: 'Daily', format: 'PDF', status: 'Active', access: 'Private', views: 31, downloads: 12 },
    { id: 5, name: 'Safety Incident Report', description: 'Safety violations and incident tracking', category: 'safety', lastGenerated: 'Oct 15, 2025', frequency: 'Weekly', format: 'PDF', status: 'Active', access: 'Public', views: 15, downloads: 7 },
    { id: 6, name: 'Client Satisfaction Report', description: 'Customer feedback and satisfaction metrics', category: 'customer', lastGenerated: 'Oct 12, 2025', frequency: 'Monthly', format: 'PDF', status: 'Archive', access: 'Private', views: 8, downloads: 2 },
  ]

  // Filter reports based on selected filter
  const filteredReports = reports.filter(report => 
    filter === 'all' || report.category === filter
  )

  // Helper functions for styling
  const getCategoryColor = (category: string) => {
    const colors: Record<string, string> = {
      project: 'bg-blue-100 text-blue-800',
      finance: 'bg-amber-100 text-amber-800',
      operations: 'bg-emerald-100 text-emerald-800',
      quality: 'bg-purple-100 text-purple-800',
      safety: 'bg-red-100 text-red-800',
      customer: 'bg-indigo-100 text-indigo-800',
      sales: 'bg-teal-100 text-teal-800',
    }
    return colors[category] || 'bg-slate-100 text-slate-800'
  }

  const getStatusColor = (status: string) => {
    return status === 'Active' ? 'bg-emerald-100 text-emerald-800' : 'bg-slate-100 text-slate-800'
  }

  const getAccessColor = (access: string) => {
    return access === 'Public' ? 'bg-blue-100 text-blue-800' : 'bg-amber-100 text-amber-800'
  }

  const openReportModal = (report: any) => {
    setSelectedReport(report)
    setShowReportModal(true)
  }

  const closeReportModal = () => {
    setShowReportModal(false)
    setSelectedReport(null)
  }

  const handleLogout = () => {
    localStorage.removeItem('token')
    setIsLoggedIn(false)
    setUser(null)
    router.push('/login')
  }

  // Mock data for charts
  const projectCompletionData = [
    { date: '2025-01', completion: 65 },
    { date: '2025-02', completion: 72 },
    { date: '2025-03', completion: 78 },
    { date: '2025-04', completion: 82 },
    { date: '2025-05', completion: 85 },
    { date: '2025-06', completion: 87 }
  ]

  const revenueData = [
    { month: 'Jan', revenue: 320000 },
    { month: 'Feb', revenue: 380000 },
    { month: 'Mar', revenue: 450000 },
    { month: 'Apr', revenue: 420000 },
    { month: 'May', revenue: 480000 },
    { month: 'Jun', revenue: 510000 }
  ]

  const crewProductivityData = [
    { week: 'Week 1', productivity: 82 },
    { week: 'Week 2', productivity: 85 },
    { week: 'Week 3', productivity: 89 },
    { week: 'Week 4', productivity: 87 },
    { week: 'Week 5', productivity: 91 },
    { week: 'Week 6', productivity: 88 }
  ]

  const defectTrendData = [
    { month: 'Jan', defects: 12 },
    { month: 'Feb', defects: 8 },
    { month: 'Mar', defects: 6 },
    { month: 'Apr', defects: 5 },
    { month: 'May', defects: 4 },
    { month: 'Jun', defects: 3 }
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      
      <UserLayout user={user} onLogout={handleLogout}>
        <main className="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
          {/* Page Header */}
          <div className="mb-8">
            <div className="flex flex-col md:flex-row md:items-center md:justify-between">
              <div>
                <h1 className="text-3xl font-bold text-slate-800">Analytics Dashboard</h1>
                <p className="text-slate-600">Comprehensive insights into construction project performance</p>
              </div>
              <div className="mt-4 md:mt-0 flex space-x-3">
                <select 
                  className="border border-slate-300 rounded-lg px-3 py-2 text-sm"
                  value={timeRange}
                  onChange={(e) => setTimeRange(e.target.value)}
                >
                  <option value="7d">Last 7 days</option>
                  <option value="30d">Last 30 days</option>
                  <option value="90d">Last 90 days</option>
                  <option value="1y">Last year</option>
                </select>
                <button 
                  className="bg-gradient-to-r from-teal-500 to-teal-600 text-white px-4 py-2 rounded-lg font-medium hover:from-teal-600 hover:to-teal-700 transition duration-300 shadow-md flex items-center"
                  onClick={() => router.push('/reports/generate')}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m-9 6h10a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  Generate Report
                </button>
              </div>
            </div>
          </div>

          {/* Key Metrics */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-white rounded-2xl shadow-md hover:shadow-lg transition duration-300 p-6 border-l-4 border-teal-500 card cursor-pointer transform hover:-translate-y-1" onClick={() => setSelectedMetric('projects')}>
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-sm font-medium text-slate-500">Active Projects</p>
                  <p className="text-3xl font-bold text-slate-800 mt-1">{analytics.projectPerformance.activeProjects}</p>
                </div>
                <div className="bg-teal-100 p-3 rounded-full">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-teal-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
                  </svg>
                </div>
              </div>
              <div className="mt-4">
                <span className="text-xs text-emerald-500">↑ 2 from last month</span>
              </div>
            </div>

            <div className="bg-white rounded-2xl shadow-md hover:shadow-lg transition duration-300 p-6 border-l-4 border-amber-500 card cursor-pointer transform hover:-translate-y-1" onClick={() => setSelectedMetric('financial')}>
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-sm font-medium text-slate-500">Revenue This Month</p>
                  <p className="text-3xl font-bold text-slate-800 mt-1">₹{Math.round(analytics.financialMetrics.revenueThisMonth / 1000)}k</p>
                </div>
                <div className="bg-amber-100 p-3 rounded-full">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-amber-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
              </div>
              <div className="mt-4">
                <span className="text-xs text-emerald-500">↑ 18% from last month</span>
              </div>
            </div>

            <div className="bg-white rounded-2xl shadow-md hover:shadow-lg transition duration-300 p-6 border-l-4 border-emerald-500 card cursor-pointer transform hover:-translate-y-1" onClick={() => setSelectedMetric('resources')}>
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-sm font-medium text-slate-500">Active Crews</p>
                  <p className="text-3xl font-bold text-slate-800 mt-1">{analytics.resourceUtilization.activeCrews}</p>
                </div>
                <div className="bg-emerald-100 p-3 rounded-full">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-emerald-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                </div>
              </div>
              <div className="mt-4">
                <span className="text-xs text-slate-500">{analytics.resourceUtilization.idleCrews} idle crews</span>
              </div>
            </div>

            <div className="bg-white rounded-2xl shadow-md hover:shadow-lg transition duration-300 p-6 border-l-4 border-indigo-500 card cursor-pointer transform hover:-translate-y-1" onClick={() => setSelectedMetric('quality')}>
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-sm font-medium text-slate-500">Quality Rating</p>
                  <p className="text-3xl font-bold text-slate-800 mt-1">{analytics.qualityMetrics.qualityRating}%</p>
                </div>
                <div className="bg-indigo-100 p-3 rounded-full">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                  </svg>
                </div>
              </div>
              <div className="mt-4">
                <span className="text-xs text-emerald-500">↑ 3% from last month</span>
              </div>
            </div>
          </div>

          {/* Analytics Charts */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            {/* Project Completion Rate */}
            <div className="bg-white rounded-2xl shadow-md p-6 card">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold text-slate-800">Project Completion Rate</h2>
                <div className="flex space-x-2">
                  <button 
                    className={`text-xs px-2 py-1 rounded ${timeRange === '7d' ? 'bg-teal-100 text-teal-800' : 'bg-slate-100 text-slate-600'}`}
                    onClick={() => setTimeRange('7d')}
                  >
                    7D
                  </button>
                  <button 
                    className={`text-xs px-2 py-1 rounded ${timeRange === '30d' ? 'bg-teal-100 text-teal-800' : 'bg-slate-100 text-slate-600'}`}
                    onClick={() => setTimeRange('30d')}
                  >
                    30D
                  </button>
                </div>
              </div>
              <div className="h-64 flex items-end space-x-2 mt-8">
                {projectCompletionData.map((data, index) => (
                  <div key={index} className="flex flex-col items-center flex-1 group">
                    <div className="text-xs text-slate-500 mb-1 group-hover:text-teal-600 transition-colors">
                      {data.completion}%
                    </div>
                    <div 
                      className="w-full bg-gradient-to-t from-teal-400 to-teal-600 rounded-t transition-all duration-300 group-hover:from-teal-500 group-hover:to-teal-700"
                      style={{ height: `${(data.completion / 100) * 200}px` }}
                    ></div>
                    <div className="text-xs text-slate-600 mt-1 group-hover:text-slate-800 transition-colors">
                      {data.date}
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-4 text-center">
                <p className="text-sm text-slate-600">
                  Current completion rate: <span className="font-medium text-slate-800">{analytics.projectPerformance.projectCompletionRate}%</span>
                </p>
              </div>
            </div>

            {/* Revenue Trend */}
            <div className="bg-white rounded-2xl shadow-md p-6 card">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold text-slate-800">Revenue Trend</h2>
                <div className="flex space-x-2">
                  <button 
                    className={`text-xs px-2 py-1 rounded ${timeRange === '7d' ? 'bg-amber-100 text-amber-800' : 'bg-slate-100 text-slate-600'}`}
                    onClick={() => setTimeRange('7d')}
                  >
                    7D
                  </button>
                  <button 
                    className={`text-xs px-2 py-1 rounded ${timeRange === '30d' ? 'bg-amber-100 text-amber-800' : 'bg-slate-100 text-slate-600'}`}
                    onClick={() => setTimeRange('30d')}
                  >
                    30D
                  </button>
                </div>
              </div>
              <div className="h-64 flex items-end space-x-2 mt-8">
                {revenueData.map((data, index) => (
                  <div key={index} className="flex flex-col items-center flex-1 group">
                    <div className="text-xs text-slate-500 mb-1 group-hover:text-amber-600 transition-colors">
                      ₹{(data.revenue / 1000).toFixed(1)}k
                    </div>
                    <div 
                      className="w-full bg-gradient-to-t from-amber-400 to-amber-600 rounded-t transition-all duration-300 group-hover:from-amber-500 group-hover:to-amber-700"
                      style={{ height: `${(data.revenue / Math.max(...revenueData.map(d => d.revenue))) * 200}px` }}
                    ></div>
                    <div className="text-xs text-slate-600 mt-1 group-hover:text-slate-800 transition-colors">
                      {data.month}
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-4 text-center">
                <p className="text-sm text-slate-600">
                  Total revenue: <span className="font-medium text-slate-800">₹{Math.round(analytics.financialMetrics.totalRevenue / 100000)}L</span>
                </p>
              </div>
            </div>
          </div>

          {/* Detailed Analytics */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            {/* Crew Productivity */}
            <div className="bg-white rounded-2xl shadow-md p-6 card">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold text-slate-800">Crew Productivity</h2>
                <div className="flex space-x-2">
                  <button 
                    className={`text-xs px-2 py-1 rounded ${timeRange === '7d' ? 'bg-emerald-100 text-emerald-800' : 'bg-slate-100 text-slate-600'}`}
                    onClick={() => setTimeRange('7d')}
                  >
                    7D
                  </button>
                  <button 
                    className={`text-xs px-2 py-1 rounded ${timeRange === '30d' ? 'bg-emerald-100 text-emerald-800' : 'bg-slate-100 text-slate-600'}`}
                    onClick={() => setTimeRange('30d')}
                  >
                    30D
                  </button>
                </div>
              </div>
              <div className="h-64 flex items-end space-x-2 mt-8">
                {crewProductivityData.map((data, index) => (
                  <div key={index} className="flex flex-col items-center flex-1 group">
                    <div className="text-xs text-slate-500 mb-1 group-hover:text-emerald-600 transition-colors">
                      {data.productivity}%
                    </div>
                    <div 
                      className="w-full bg-gradient-to-t from-emerald-400 to-emerald-600 rounded-t transition-all duration-300 group-hover:from-emerald-500 group-hover:to-emerald-700"
                      style={{ height: `${(data.productivity / 100) * 200}px` }}
                    ></div>
                    <div className="text-xs text-slate-600 mt-1 group-hover:text-slate-800 transition-colors">
                      {data.week}
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-4 text-center">
                <p className="text-sm text-slate-600">
                  Avg productivity: <span className="font-medium text-slate-800">{analytics.resourceUtilization.avgCrewProductivity}%</span>
                </p>
              </div>
            </div>

            {/* Defect Trend */}
            <div className="bg-white rounded-2xl shadow-md p-6 card">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold text-slate-800">Defect Trend</h2>
                <div className="flex space-x-2">
                  <button 
                    className={`text-xs px-2 py-1 rounded ${timeRange === '7d' ? 'bg-indigo-100 text-indigo-800' : 'bg-slate-100 text-slate-600'}`}
                    onClick={() => setTimeRange('7d')}
                  >
                    7D
                  </button>
                  <button 
                    className={`text-xs px-2 py-1 rounded ${timeRange === '30d' ? 'bg-indigo-100 text-indigo-800' : 'bg-slate-100 text-slate-600'}`}
                    onClick={() => setTimeRange('30d')}
                  >
                    30D
                  </button>
                </div>
              </div>
              <div className="h-64 flex items-end space-x-2 mt-8">
                {defectTrendData.map((data, index) => (
                  <div key={index} className="flex flex-col items-center flex-1 group">
                    <div className="text-xs text-slate-500 mb-1 group-hover:text-indigo-600 transition-colors">
                      {data.defects}
                    </div>
                    <div 
                      className="w-full bg-gradient-to-t from-indigo-400 to-indigo-600 rounded-t transition-all duration-300 group-hover:from-indigo-500 group-hover:to-indigo-700"
                      style={{ height: `${(data.defects / Math.max(...defectTrendData.map(d => d.defects))) * 200}px` }}
                    ></div>
                    <div className="text-xs text-slate-600 mt-1 group-hover:text-slate-800 transition-colors">
                      {data.month}
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-4 text-center">
                <p className="text-sm text-slate-600">
                  Resolution rate: <span className="font-medium text-slate-800">{analytics.qualityMetrics.defectResolutionRate}%</span>
                </p>
              </div>
            </div>
          </div>

          {/* Reports List */}
          <div className="bg-white rounded-2xl shadow-md p-6 card">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold text-slate-800">Generated Reports</h2>
              <div className="flex space-x-2">
                <select 
                  className="border border-slate-300 rounded-lg px-3 py-1 text-sm"
                  value={filter}
                  onChange={(e) => setFilter(e.target.value)}
                >
                  <option value="all">All Reports</option>
                  <option value="sales">Sales</option>
                  <option value="finance">Finance</option>
                  <option value="operations">Operations</option>
                  <option value="customer">Customer</option>
                  <option value="safety">Safety</option>
                  <option value="project">Project</option>
                </select>
                <button 
                  className="text-sm text-teal-600 hover:text-teal-800 font-medium"
                  onClick={() => router.push('/reports/scheduled')}
                >
                  Scheduled Reports
                </button>
              </div>
            </div>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-slate-200">
                <thead className="bg-slate-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Report</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Category</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Last Generated</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Frequency</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Format</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Access</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Engagement</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-slate-200">
                  {filteredReports.map((report) => (
                    <tr 
                      key={report.id} 
                      className="hover:bg-slate-50 transition cursor-pointer"
                      onClick={() => openReportModal(report)}
                    >
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-slate-900">{report.name}</div>
                        <div className="text-sm text-slate-500">{report.description}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 py-1 text-xs rounded-full ${getCategoryColor(report.category)}`}>
                          {report.category}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-600">
                        {report.lastGenerated}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-600">
                        {report.frequency}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-600">
                        {report.format}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(report.status)}`}>
                          {report.status}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 py-1 text-xs rounded-full ${getAccessColor(report.access)}`}>
                          {report.access}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-600">
                        <div className="flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-slate-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                          </svg>
                          <span className="mr-3">{report.views}</span>
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-slate-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                          </svg>
                          <span>{report.downloads}</span>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button 
                          className="text-teal-600 hover:text-teal-900 mr-3"
                          onClick={(e) => {
                            e.stopPropagation()
                            router.push(`/reports/${report.id}/view`)
                          }}
                        >
                          View
                        </button>
                        <button 
                          className="text-blue-600 hover:text-blue-900"
                          onClick={(e) => {
                            e.stopPropagation()
                            router.push(`/reports/${report.id}/download`)
                          }}
                        >
                          Download
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Analytics Features */}
          <div className="mt-8 bg-white rounded-2xl shadow-md p-6 card">
            <h2 className="text-xl font-semibold text-slate-800 mb-4">Analytics & Reporting Features</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="border border-slate-200 rounded-lg p-4 text-center hover:shadow-md transition">
                <div className="w-12 h-12 bg-gradient-to-br from-teal-100 to-teal-200 rounded-lg flex items-center justify-center mx-auto mb-3">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-teal-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                  </svg>
                </div>
                <h3 className="font-medium text-slate-800 mb-2">Real-time Dashboards</h3>
                <p className="text-sm text-slate-600">Interactive dashboards with live project data and KPIs</p>
              </div>
              
              <div className="border border-slate-200 rounded-lg p-4 text-center hover:shadow-md transition">
                <div className="w-12 h-12 bg-gradient-to-br from-amber-100 to-amber-200 rounded-lg flex items-center justify-center mx-auto mb-3">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-amber-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h10a2 2 0 012 2v16a2 2 0 01-2 2z" />
                  </svg>
                </div>
                <h3 className="font-medium text-slate-800 mb-2">Custom Reports</h3>
                <p className="text-sm text-slate-600">Create custom reports with drag-and-drop report builder</p>
              </div>
              
              <div className="border border-slate-200 rounded-lg p-4 text-center hover:shadow-md transition">
                <div className="w-12 h-12 bg-gradient-to-br from-emerald-100 to-emerald-200 rounded-lg flex items-center justify-center mx-auto mb-3">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-emerald-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                </div>
                <h3 className="font-medium text-slate-800 mb-2">Scheduled Reports</h3>
                <p className="text-sm text-slate-600">Automated report generation and delivery on custom schedules</p>
              </div>
              
              <div className="border border-slate-200 rounded-lg p-4 text-center hover:shadow-md transition">
                <div className="w-12 h-12 bg-gradient-to-br from-indigo-100 to-indigo-200 rounded-lg flex items-center justify-center mx-auto mb-3">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                  </svg>
                </div>
                <h3 className="font-medium text-slate-800 mb-2">Advanced Analytics</h3>
                <p className="text-sm text-slate-600">Predictive analytics and machine learning for project insights</p>
              </div>
            </div>
          </div>
        </main>
      </UserLayout>

      {/* Report Details Modal */}
      {showReportModal && selectedReport && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div className="px-6 py-4 border-b border-slate-200 flex justify-between items-center sticky top-0 bg-white">
              <h3 className="text-lg font-semibold text-slate-800">{selectedReport.name}</h3>
              <button 
                onClick={closeReportModal}
                className="text-slate-400 hover:text-slate-500"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div className="p-6">
              <div className="mb-6">
                <p className="text-slate-600">{selectedReport.description}</p>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                  <h4 className="font-medium text-slate-800 mb-2">Report Details</h4>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="text-slate-600">Category:</span>
                      <span className={`px-2 py-1 text-xs rounded-full ${getCategoryColor(selectedReport.category)}`}>
                        {selectedReport.category}
                      </span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-slate-600">Last Generated:</span>
                      <span className="text-slate-800">{selectedReport.lastGenerated}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-slate-600">Frequency:</span>
                      <span className="text-slate-800">{selectedReport.frequency}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-slate-600">Format:</span>
                      <span className="text-slate-800">{selectedReport.format}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-slate-600">Status:</span>
                      <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(selectedReport.status)}`}>
                        {selectedReport.status}
                      </span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-slate-600">Access:</span>
                      <span className={`px-2 py-1 text-xs rounded-full ${getAccessColor(selectedReport.access)}`}>
                        {selectedReport.access}
                      </span>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h4 className="font-medium text-slate-800 mb-2">Engagement Metrics</h4>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="text-slate-600">Total Views:</span>
                      <span className="text-slate-800">{selectedReport.views}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-slate-600">Total Downloads:</span>
                      <span className="text-slate-800">{selectedReport.downloads}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-slate-600">Avg. Time Spent:</span>
                      <span className="text-slate-800">3.2 min</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-slate-600">Completion Rate:</span>
                      <span className="text-slate-800">78%</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-slate-600">Feedback Score:</span>
                      <span className="text-slate-800">4.6/5</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mb-6">
                <h4 className="font-medium text-slate-800 mb-2">Recent Activity</h4>
                <div className="space-y-3">
                  <div className="border-l-4 border-teal-500 pl-4 py-2">
                    <p className="text-sm text-slate-800">Report generated successfully</p>
                    <p className="text-xs text-slate-500">Today, 9:30 AM</p>
                  </div>
                  <div className="border-l-4 border-amber-500 pl-4 py-2">
                    <p className="text-sm text-slate-800">Report viewed by Sarah Johnson</p>
                    <p className="text-xs text-slate-500">Today, 10:15 AM</p>
                  </div>
                  <div className="border-l-4 border-blue-500 pl-4 py-2">
                    <p className="text-sm text-slate-800">Report downloaded by Mike Chen</p>
                    <p className="text-xs text-slate-500">Today, 11:45 AM</p>
                  </div>
                </div>
              </div>
              
              <div className="flex space-x-3">
                <button 
                  className="flex-1 bg-gradient-to-r from-teal-500 to-teal-600 text-white py-2 px-4 rounded-lg font-medium hover:from-teal-600 hover:to-teal-700 transition duration-300"
                  onClick={() => {
                    // Download report logic here
                    alert(`Downloading ${selectedReport.name}...`)
                  }}
                >
                  Download Report
                </button>
                <button 
                  className="flex-1 border border-slate-300 text-slate-700 py-2 px-4 rounded-lg font-medium hover:bg-slate-50 transition duration-300"
                  onClick={() => router.push(`/reports/${selectedReport.id}/edit`)}
                >
                  Customize Report
                </button>
                <button 
                  className="flex-1 border border-slate-300 text-slate-700 py-2 px-4 rounded-lg font-medium hover:bg-slate-50 transition duration-300"
                  onClick={closeReportModal}
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}