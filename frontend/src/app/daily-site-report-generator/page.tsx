"use client";

import React, { useState, useEffect } from 'react';

const DailySiteReportGenerator = () => {
  const [reportDate, setReportDate] = useState('');
  const [weather, setWeather] = useState('');
  const [siteConditions, setSiteConditions] = useState('');
  const [workPerformed, setWorkPerformed] = useState('');
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    logAnalytics('ToolOpened', 'DailySiteReportGenerator');
    const today = new Date();
    setReportDate(today.toISOString().split('T')[0]);
  }, []);

  const logAnalytics = async (eventType: string, eventDetails: string) => {
    const timestamp = new Date().toISOString();
    const logContent = `## Analytics Event: ${eventType}\n\n**Timestamp:** ${timestamp}\n**Tool:** DailySiteReportGenerator\n**Details:** ${eventDetails}\n\n---\n`;
    console.log(logContent);
  };

  const handleGenerateReport = () => {
    setError('');
    if (!reportDate || !weather || !siteConditions || !workPerformed) {
      setError('Please fill in all report fields.');
      return;
    }

    const reportContent = `
# Daily Site Report - ${reportDate}

## Weather Conditions:
${weather}

## Site Conditions:
${siteConditions}

## Work Performed:
${workPerformed}

---
Generated by BuildMate Daily Site Report Generator
`;

    // For demonstration, we'll log the report content and simulate printing
    console.log("Generated Report:\n", reportContent);
    alert('Report generated! Check console for content. In a real app, this would open a print-friendly view.');
    logAnalytics('ToolSubmitted', 'ReportGenerated');
  };

  const handleLeadCapture = () => {
    if (email) {
      logAnalytics('LeadCaptured', `DailySiteReportGenerator - ${email}`);
      alert('Thank you for your interest! We will keep you updated.');
    } else {
      alert('Please enter your email address.');
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-6 text-center">Daily Site Report Generator</h1>

      <div className="bg-white shadow-md rounded-lg p-6 mb-8">
        <h2 className="text-2xl font-semibold mb-4">Report Details</h2>
        <div className="grid grid-cols-1 gap-4 mb-4">
          <div>
            <label htmlFor="reportDate" className="block text-sm font-medium text-gray-700">Date</label>
            <input
              type="date"
              id="reportDate"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              value={reportDate}
              onChange={(e) => setReportDate(e.target.value)}
            />
          </div>
          <div>
            <label htmlFor="weather" className="block text-sm font-medium text-gray-700">Weather Conditions</label>
            <textarea
              id="weather"
              rows={3}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              value={weather}
              onChange={(e) => setWeather(e.target.value)}
              placeholder="e.g., Sunny, 25Â°C, Light breeze"
            ></textarea>
          </div>
          <div>
            <label htmlFor="siteConditions" className="block text-sm font-medium text-gray-700">Site Conditions</label>
            <textarea
              id="siteConditions"
              rows={3}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              value={siteConditions}
              onChange={(e) => setSiteConditions(e.target.value)}
              placeholder="e.g., Ground dry, good visibility, equipment operational"
            ></textarea>
          </div>
          <div>
            <label htmlFor="workPerformed" className="block text-sm font-medium text-gray-700">Work Performed</label>
            <textarea
              id="workPerformed"
              rows={5}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              value={workPerformed}
              onChange={(e) => setWorkPerformed(e.target.value)}
              placeholder="e.g., Concrete pouring for slab 1, rebar installation for wall A, safety briefing conducted"
            ></textarea>
          </div>
        </div>

        {error && <p className="text-red-500 text-sm mb-4">{error}</p>}

        <button
          onClick={handleGenerateReport}
          className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          Generate Report
        </button>
      </div>

      <div className="bg-gray-100 shadow-md rounded-lg p-6">
        <h2 className="text-2xl font-bold mb-4 text-center">Stay Updated!</h2>
        <p className="text-center text-gray-700 mb-4">Enter your email to receive updates on new tools and features.</p>
        <div className="flex flex-col sm:flex-row gap-4">
          <input
            type="email"
            className="flex-grow border border-gray-300 rounded-md shadow-sm p-2"
            placeholder="your.email@example.com"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
          <button
            onClick={handleLeadCapture}
            className="bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
          >
            Subscribe
          </button>
        </div>
      </div>
    </div>
  );
};

export default DailySiteReportGenerator;
