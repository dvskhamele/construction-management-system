
"use client";
import { useState, useEffect } from "react";
import Head from "next/head";

const WallPlasteringAreaCalculator = () => {
  const [wallLength, setWallLength] = useState("");
  const [wallHeight, setWallHeight] = useState("");
  const [numDoors, setNumDoors] = useState("0");
  const [doorWidth, setDoorWidth] = useState("0.9"); // meters
  const [doorHeight, setDoorHeight] = useState("2.1"); // meters
  const [numWindows, setNumWindows] = useState("0");
  const [windowWidth, setWindowWidth] = useState("1.2"); // meters
  const [windowHeight, setWindowHeight] = useState("1.2"); // meters
  const [netPlasteringArea, setNetPlasteringArea] = useState(null);
  const [email, setEmail] = useState("");
  const [isSubmitted, setIsSubmitted] = useState(false);

  const calculateArea = () => {
    const length = parseFloat(wallLength);
    const height = parseFloat(wallHeight);
    const doors = parseInt(numDoors);
    const dWidth = parseFloat(doorWidth);
    const dHeight = parseFloat(doorHeight);
    const windows = parseInt(numWindows);
    const wWidth = parseFloat(windowWidth);
    const wHeight = parseFloat(windowHeight);

    if (length > 0 && height > 0) {
      const totalWallArea = length * height;
      const totalDoorArea = doors * dWidth * dHeight;
      const totalWindowArea = windows * wWidth * wHeight;

      const netArea = totalWallArea - totalDoorArea - totalWindowArea;
      setNetPlasteringArea(netArea.toFixed(2));
      localStorage.setItem("wallPlasteringAreaCalculator", JSON.stringify({ wallLength, wallHeight, numDoors, doorWidth, doorHeight, numWindows, windowWidth, windowHeight, netPlasteringArea: netArea.toFixed(2) }));
      logAnalyticsEvent("Wall_Plastering_Area_Estimation", { length, height, doors, dWidth, dHeight, windows, wWidth, wHeight });
    }
  };

  const handleEmailSubmit = (e) => {
    e.preventDefault();
    if (email) {
      console.log("Lead captured:", email);
      saveLead(email);
      setIsSubmitted(true);
      setEmail("");
    }
  };

  const saveLead = (leadEmail) => {
    const existingLeads = JSON.parse(localStorage.getItem("wall_plastering_leads")) || [];
    const newLeads = [...existingLeads, { email: leadEmail, timestamp: new Date().toISOString() }];
    localStorage.setItem("wall_plastering_leads", JSON.stringify(newLeads));
  };

  const logAnalyticsEvent = (eventName: string, eventData: any) => {
    const existingEvents = JSON.parse(localStorage.getItem("analytics_events")) || [];
    const newEvent = { name: eventName, data: eventData, timestamp: new Date().toISOString() };
    const newEvents = [...existingEvents, newEvent];
    localStorage.setItem("analytics_events", JSON.stringify(newEvents));
  };

  useEffect(() => {
    const savedData = JSON.parse(localStorage.getItem("wallPlasteringAreaCalculator"));
    if (savedData) {
      setWallLength(savedData.wallLength);
      setWallHeight(savedData.wallHeight);
      setNumDoors(savedData.numDoors);
      setDoorWidth(savedData.doorWidth);
      setDoorHeight(savedData.doorHeight);
      setNumWindows(savedData.numWindows);
      setWindowWidth(savedData.windowWidth);
      setWindowHeight(savedData.windowHeight);
      setNetPlasteringArea(savedData.netPlasteringArea);
    }
  }, []);

  return (
    <>
      <Head>
        <title>Wall Plastering Area Calculator | BuildMate</title>
        <meta name="description" content="Estimate the net plastering area of walls, deducting for doors and windows, with our free online calculator. Essential for accurate material estimation."/>
        <meta property="og:title" content="Wall Plastering Area Calculator | BuildMate" />
        <meta property="og:description" content="A free tool for Indian contractors to accurately estimate wall plastering areas." />
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://constructioncrm.vercel.app/tools/wall-plastering-area-calculator" />
        <meta property="og:image" content="https://constructioncrm.vercel.app/og-image-wall-plastering-calculator.png" />
      </Head>
      <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
        <div className="max-w-3xl w-full bg-white p-8 rounded-lg shadow-md">
          <h1 className="text-3xl font-bold text-center text-gray-800 mb-4">Wall Plastering Area Calculator</h1>
          <p className="text-center text-gray-600 mb-8">Estimate the net plastering area of walls, deducting for openings.</p>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="form-group">
              <label htmlFor="wallLength" className="block text-sm font-medium text-gray-700 mb-1">Total Wall Length (meters)</label>
              <input type="number" id="wallLength" value={wallLength} onChange={(e) => setWallLength(e.target.value)} placeholder="e.g., 20" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
            <div className="form-group">
              <label htmlFor="wallHeight" className="block text-sm font-medium text-gray-700 mb-1">Wall Height (meters)</label>
              <input type="number" id="wallHeight" value={wallHeight} onChange={(e) => setWallHeight(e.target.value)} placeholder="e.g., 3" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
            <div className="form-group">
              <label htmlFor="numDoors" className="block text-sm font-medium text-gray-700 mb-1">Number of Doors</label>
              <input type="number" id="numDoors" value={numDoors} onChange={(e) => setNumDoors(e.target.value)} placeholder="e.g., 2" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
            <div className="form-group">
              <label htmlFor="doorWidth" className="block text-sm font-medium text-gray-700 mb-1">Door Width (meters)</label>
              <input type="number" id="doorWidth" value={doorWidth} onChange={(e) => setDoorWidth(e.target.value)} placeholder="e.g., 0.9" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
            <div className="form-group">
              <label htmlFor="doorHeight" className="block text-sm font-medium text-gray-700 mb-1">Door Height (meters)</label>
              <input type="number" id="doorHeight" value={doorHeight} onChange={(e) => setDoorHeight(e.target.value)} placeholder="e.g., 2.1" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
            <div className="form-group">
              <label htmlFor="numWindows" className="block text-sm font-medium text-gray-700 mb-1">Number of Windows</label>
              <input type="number" id="numWindows" value={numWindows} onChange={(e) => setNumWindows(e.target.value)} placeholder="e.g., 3" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
            <div className="form-group">
              <label htmlFor="windowWidth" className="block text-sm font-medium text-gray-700 mb-1">Window Width (meters)</label>
              <input type="number" id="windowWidth" value={windowWidth} onChange={(e) => setWindowWidth(e.target.value)} placeholder="e.g., 1.2" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
            <div className="form-group">
              <label htmlFor="windowHeight" className="block text-sm font-medium text-gray-700 mb-1">Window Height (meters)</label>
              <input type="number" id="windowHeight" value={windowHeight} onChange={(e) => setWindowHeight(e.target.value)} placeholder="e.g., 1.2" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
          </div>

          <div className="text-center mt-8">
            <button onClick={calculateArea} className="w-full md:w-auto bg-blue-600 text-white font-bold py-3 px-6 rounded-md hover:bg-blue-700 transition-colors">Calculate</button>
          </div>

          {netPlasteringArea && (
            <div className="mt-8 p-6 bg-blue-50 border border-blue-200 rounded-lg text-center">
              <h2 className="text-2xl font-semibold text-gray-800">Estimated Net Plastering Area</h2>
              <p className="text-4xl font-bold text-blue-600 mt-4">{netPlasteringArea} sq. m</p>
            </div>
          )}

          <div className="mt-10 text-center">
            <h3 className="text-xl font-semibold text-gray-800 mb-4">Get More Tools & Insights</h3>
            <p className="text-gray-600 mb-6">Join our newsletter for more free tools, industry news, and tips for construction professionals in India.</p>
            {isSubmitted ? (
              <p className="text-green-600 font-semibold">Thank you for subscribing!</p>
            ) : (
              <form onSubmit={handleEmailSubmit} className="flex flex-col md:flex-row justify-center items-center gap-4">
                <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Enter your email" required className="w-full md:w-80 px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
                <button type="submit" className="w-full md:w-auto bg-green-600 text-white font-bold py-2 px-6 rounded-md hover:bg-green-700 transition-colors">Subscribe</button>
              </form>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default WallPlasteringAreaCalculator;
