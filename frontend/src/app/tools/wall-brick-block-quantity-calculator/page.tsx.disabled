
"use client";
import { useState, useEffect } from "react";
import Head from "next/head";

const WallBrickBlockQuantityCalculator = () => {
  const [wallArea, setWallArea] = useState("");
  const [brickLength, setBrickLength] = useState("190"); // Standard brick size in mm
  const [brickHeight, setBrickHeight] = useState("90");
  const [wallThicknessType, setWallThicknessType] = useState("halfBrick"); // halfBrick or fullBrick
  const [numberOfBricks, setNumberOfBricks] = useState(null);
  const [email, setEmail] = useState("");
  const [isSubmitted, setIsSubmitted] = useState(false);

  const calculateQuantity = () => {
    const area = parseFloat(wallArea);
    const bLength = parseFloat(brickLength) / 1000; // Convert mm to meters
    const bHeight = parseFloat(brickHeight) / 1000; // Convert mm to meters
    const mortarThickness = 0.010; // 10mm mortar thickness in meters

    if (area > 0 && bLength > 0 && bHeight > 0) {
      const brickWithMortarLength = bLength + mortarThickness;
      const brickWithMortarHeight = bHeight + mortarThickness;
      const bricksPerSqMeter = 1 / (brickWithMortarLength * brickWithMortarHeight);
      
      let calculatedBricks = area * bricksPerSqMeter;

      if (wallThicknessType === "fullBrick") {
        // For full brick wall, typically double the bricks of a half brick wall
        // This is a simplification, actual calculation depends on bond type
        calculatedBricks *= 2;
      }

      setNumberOfBricks(Math.ceil(calculatedBricks));
      localStorage.setItem("wallBrickBlockCalculator", JSON.stringify({ wallArea, brickLength, brickHeight, wallThicknessType, numberOfBricks: Math.ceil(calculatedBricks) }));
      logAnalyticsEvent("Wall_Brick_Block_Quantity_Estimation", { area, bLength, bHeight, wallThicknessType });
    }
  };

  const handleEmailSubmit = (e) => {
    e.preventDefault();
    if (email) {
      console.log("Lead captured:", email);
      saveLead(email);
      setIsSubmitted(true);
      setEmail("");
    }
  };

  const saveLead = (leadEmail) => {
    const existingLeads = JSON.parse(localStorage.getItem("wall_brick_block_leads")) || [];
    const newLeads = [...existingLeads, { email: leadEmail, timestamp: new Date().toISOString() }];
    localStorage.setItem("wall_brick_block_leads", JSON.stringify(newLeads));
  };

  const logAnalyticsEvent = (eventName: string, eventData: any) => {
    const existingEvents = JSON.parse(localStorage.getItem("analytics_events")) || [];
    const newEvent = { name: eventName, data: eventData, timestamp: new Date().toISOString() };
    const newEvents = [...existingEvents, newEvent];
    localStorage.setItem("analytics_events", JSON.stringify(newEvents));
  };

  useEffect(() => {
    const savedData = JSON.parse(localStorage.getItem("wallBrickBlockCalculator"));
    if (savedData) {
      setWallArea(savedData.wallArea);
      setBrickLength(savedData.brickLength);
      setBrickHeight(savedData.brickHeight);
      setWallThicknessType(savedData.wallThicknessType);
      setNumberOfBricks(savedData.numberOfBricks);
    }
  }, []);

  return (
    <>
      <Head>
        <title>Wall Brick/Block Quantity Calculator | BuildMate</title>
        <meta name="description" content="Estimate the number of bricks or blocks required for your wall construction based on area and wall thickness. Free online calculator for Indian contractors."/>
        <meta property="og:title" content="Wall Brick/Block Quantity Calculator | BuildMate" />
        <meta property="og:description" content="A free tool for Indian contractors to accurately estimate brick/block quantities for walls." />
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://constructioncrm.vercel.app/tools/wall-brick-block-quantity-calculator" />
        <meta property="og:image" content="https://constructioncrm.vercel.app/og-image-wall-brick-block-calculator.png" />
      </Head>
      <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
        <div className="max-w-2xl w-full bg-white p-8 rounded-lg shadow-md">
          <h1 className="text-3xl font-bold text-center text-gray-800 mb-4">Wall Brick/Block Quantity Calculator</h1>
          <p className="text-center text-gray-600 mb-8">Estimate the number of bricks or blocks required for your walls.</p>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="form-group">
              <label htmlFor="wallArea" className="block text-sm font-medium text-gray-700 mb-1">Wall Area (sq. m)</label>
              <input type="number" id="wallArea" value={wallArea} onChange={(e) => setWallArea(e.target.value)} placeholder="e.g., 50" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
            <div className="form-group">
              <label htmlFor="brickLength" className="block text-sm font-medium text-gray-700 mb-1">Brick/Block Length (mm)</label>
              <input type="number" id="brickLength" value={brickLength} onChange={(e) => setBrickLength(e.target.value)} placeholder="e.g., 190" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
            <div className="form-group">
              <label htmlFor="brickHeight" className="block text-sm font-medium text-gray-700 mb-1">Brick/Block Height (mm)</label>
              <input type="number" id="brickHeight" value={brickHeight} onChange={(e) => setBrickHeight(e.target.value)} placeholder="e.g., 90" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
            <div className="form-group">
              <label htmlFor="wallThicknessType" className="block text-sm font-medium text-gray-700 mb-1">Wall Thickness Type</label>
              <select id="wallThicknessType" value={wallThicknessType} onChange={(e) => setWallThicknessType(e.target.value)} className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                <option value="halfBrick">Half Brick (approx. 100mm)</option>
                <option value="fullBrick">Full Brick (approx. 200mm)</option>
              </select>
            </div>
          </div>

          <div className="text-center mt-8">
            <button onClick={calculateQuantity} className="w-full md:w-auto bg-blue-600 text-white font-bold py-3 px-6 rounded-md hover:bg-blue-700 transition-colors">Calculate</button>
          </div>

          {numberOfBricks && (
            <div className="mt-8 p-6 bg-blue-50 border border-blue-200 rounded-lg text-center">
              <h2 className="text-2xl font-semibold text-gray-800">Estimated Bricks/Blocks</h2>
              <p className="text-4xl font-bold text-blue-600 mt-4">{numberOfBricks}</p>
            </div>
          )}

          <div className="mt-10 text-center">
            <h3 className="text-xl font-semibold text-gray-800 mb-4">Get More Tools & Insights</h3>
            <p className="text-gray-600 mb-6">Join our newsletter for more free tools, industry news, and tips for construction professionals in India.</p>
            {isSubmitted ? (
              <p className="text-green-600 font-semibold">Thank you for subscribing!</p>
            ) : (
              <form onSubmit={handleEmailSubmit} className="flex flex-col md:flex-row justify-center items-center gap-4">
                <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Enter your email" required className="w-full md:w-80 px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
                <button type="submit" className="w-full md:w-auto bg-green-600 text-white font-bold py-2 px-6 rounded-md hover:bg-green-700 transition-colors">Subscribe</button>
              </form>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default WallBrickBlockQuantityCalculator;
