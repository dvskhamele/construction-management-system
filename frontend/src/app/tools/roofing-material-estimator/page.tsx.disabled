
"use client";
import { useState, useEffect } from "react";
import Head from "next/head";

const RoofingMaterialEstimator = () => {
  const [roofArea, setRoofArea] = useState("");
  const [materialLength, setMaterialLength] = useState(""); // e.g., tile length or sheet length
  const [materialWidth, setMaterialWidth] = useState(""); // e.g., tile width or sheet width
  const [wastage, setWastage] = useState("10"); // Default 10% wastage
  const [materials, setMaterials] = useState(null);
  const [email, setEmail] = useState("");
  const [isSubmitted, setIsSubmitted] = useState(false);

  const calculateMaterials = () => {
    const area = parseFloat(roofArea);
    const mLength = parseFloat(materialLength) / 1000; // Convert mm to meters
    const mWidth = parseFloat(materialWidth) / 1000; // Convert mm to meters
    const wastagePercent = parseFloat(wastage);

    if (area > 0 && mLength > 0 && mWidth > 0) {
      const singleMaterialArea = mLength * mWidth;
      let numberOfUnits = area / singleMaterialArea;
      numberOfUnits += numberOfUnits * (wastagePercent / 100);

      const fasteners = area * 10; // Assuming 10 fasteners per sq.m

      const estimatedMaterials = {
        units: Math.ceil(numberOfUnits),
        fasteners: Math.ceil(fasteners),
      };

      setMaterials(estimatedMaterials);
      localStorage.setItem("roofingEstimator", JSON.stringify({ roofArea, materialLength, materialWidth, wastage, materials: estimatedMaterials }));
      logAnalyticsEvent("Roofing_Material_Estimation", { area, mLength, mWidth, wastagePercent });
    }
  };

  const handleEmailSubmit = (e) => {
    e.preventDefault();
    if (email) {
      console.log("Lead captured:", email);
      saveLead(email);
      setIsSubmitted(true);
      setEmail("");
    }
  };

  const saveLead = (leadEmail) => {
    const existingLeads = JSON.parse(localStorage.getItem("roofing_leads")) || [];
    const newLeads = [...existingLeads, { email: leadEmail, timestamp: new Date().toISOString() }];
    localStorage.setItem("roofing_leads", JSON.stringify(newLeads));
  };

  const logAnalyticsEvent = (eventName: string, eventData: any) => {
    const existingEvents = JSON.parse(localStorage.getItem("analytics_events")) || [];
    const newEvent = { name: eventName, data: eventData, timestamp: new Date().toISOString() };
    const newEvents = [...existingEvents, newEvent];
    localStorage.setItem("analytics_events", JSON.stringify(newEvents));
  };

  useEffect(() => {
    const savedData = JSON.parse(localStorage.getItem("roofingEstimator"));
    if (savedData) {
      setRoofArea(savedData.roofArea);
      setMaterialLength(savedData.materialLength);
      setMaterialWidth(savedData.materialWidth);
      setWastage(savedData.wastage);
      setMaterials(savedData.materials);
    }
  }, []);

  return (
    <>
      <Head>
        <title>Roofing Material Estimator | BuildMate</title>
        <meta name="description" content="Estimate the quantity of roofing material (sheets, tiles) and fasteners required for your project with our free online calculator. Essential for Indian contractors."/>
        <meta property="og:title" content="Roofing Material Estimator | BuildMate" />
        <meta property="og:description" content="A free tool for Indian contractors to accurately estimate roofing materials." />
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://constructioncrm.vercel.app/tools/roofing-material-estimator" />
        <meta property="og:image" content="https://constructioncrm.vercel.app/og-image-roofing-estimator.png" />
      </Head>
      <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
        <div className="max-w-2xl w-full bg-white p-8 rounded-lg shadow-md">
          <h1 className="text-3xl font-bold text-center text-gray-800 mb-4">Roofing Material Estimator</h1>
          <p className="text-center text-gray-600 mb-8">Estimate the quantity of roofing material and fasteners for your project.</p>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="form-group">
              <label htmlFor="roofArea" className="block text-sm font-medium text-gray-700 mb-1">Roof Area (sq. m)</label>
              <input type="number" id="roofArea" value={roofArea} onChange={(e) => setRoofArea(e.target.value)} placeholder="e.g., 100" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
            <div className="form-group">
              <label htmlFor="materialLength" className="block text-sm font-medium text-gray-700 mb-1">Material Length (mm)</label>
              <input type="number" id="materialLength" value={materialLength} onChange={(e) => setMaterialLength(e.target.value)} placeholder="e.g., 1000 (for sheets) or 300 (for tiles)" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
            <div className="form-group">
              <label htmlFor="materialWidth" className="block text-sm font-medium text-gray-700 mb-1">Material Width (mm)</label>
              <input type="number" id="materialWidth" value={materialWidth} onChange={(e) => setMaterialWidth(e.target.value)} placeholder="e.g., 800 (for sheets) or 300 (for tiles)" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
            <div className="form-group">
              <label htmlFor="wastage" className="block text-sm font-medium text-gray-700 mb-1">Wastage (%)</label>
              <input type="number" id="wastage" value={wastage} onChange={(e) => setWastage(e.target.value)} placeholder="e.g., 10" className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
            </div>
          </div>

          <div className="text-center mt-8">
            <button onClick={calculateMaterials} className="w-full md:w-auto bg-blue-600 text-white font-bold py-3 px-6 rounded-md hover:bg-blue-700 transition-colors">Calculate</button>
          </div>

          {materials && (
            <div className="mt-8 p-6 bg-blue-50 border border-blue-200 rounded-lg">
              <h2 className="text-2xl font-semibold text-gray-800 text-center">Estimated Materials</h2>
              <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4 text-center">
                  <div className="p-4 bg-white rounded-md shadow-sm">
                      <p className="text-sm text-gray-500">Roofing Units</p>
                      <p className="text-2xl font-bold text-blue-600">{materials.units}</p>
                  </div>
                  <div className="p-4 bg-white rounded-md shadow-sm">
                      <p className="text-sm text-gray-500">Fasteners (Nos.)</p>
                      <p className="text-2xl font-bold text-blue-600">{materials.fasteners}</p>
                  </div>
              </div>
            </div>
          )}

          <div className="mt-10 text-center">
            <h3 className="text-xl font-semibold text-gray-800 mb-4">Get More Tools & Insights</h3>
            <p className="text-gray-600 mb-6">Join our newsletter for more free tools, industry news, and tips for construction professionals in India.</p>
            {isSubmitted ? (
              <p className="text-green-600 font-semibold">Thank you for subscribing!</p>
            ) : (
              <form onSubmit={handleEmailSubmit} className="flex flex-col md:flex-row justify-center items-center gap-4">
                <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Enter your email" required className="w-full md:w-80 px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
                <button type="submit" className="w-full md:w-auto bg-green-600 text-white font-bold py-2 px-6 rounded-md hover:bg-green-700 transition-colors">Subscribe</button>
              </form>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default RoofingMaterialEstimator;
