
import type { NextApiRequest, NextApiResponse } from 'next';
import fs from 'fs';
import path from 'path';

type Data = {
    id: string;
    timestamp: string;
    inputs: any;
    results: any;
} | { message: string };

export default async function handler(
    req: NextApiRequest,
    res: NextApiResponse<Data>
) {
    if (req.method === 'GET') {
        const { id } = req.query;

        if (!id || typeof id !== 'string') {
            return res.status(400).json({ message: 'Missing or invalid result ID' });
        }

        const filePath = path.join(process.cwd(), 'frontend', 'data', 'prelogin_results', `{{tool_slug}}-${id}.json`);

        try {
            const fileContents = await fs.promises.readFile(filePath, 'utf8');
            const data = JSON.parse(fileContents);
            res.status(200).json(data);
        } catch (error) {
            console.error(`Failed to read result for ID ${id}:`, error);
            res.status(404).json({ message: 'Result not found' });
        }
    } else {
        res.setHeader('Allow', ['GET']);
        res.status(405).end(`Method ${req.method} Not Allowed`);
    }
}
