
import type { NextApiRequest, NextApiResponse } from 'next';
import fs from 'fs';
import path from 'path';

type Data = {
    message: string;
    id?: string;
};

export default async function handler(
    req: NextApiRequest,
    res: NextApiResponse<Data>
) {
    if (req.method === 'POST') {
        const { inputs, results } = req.body;

        if (!inputs || !results) {
            return res.status(400).json({ message: 'Missing inputs or results' });
        }

        const id = '{{tool_slug}}-${Date.now()}';
        const filePath = path.join(process.cwd(), 'frontend', 'data', 'prelogin_results', `{{tool_slug}}-${id}.json`);

        const dataToSave = {
            id,
            timestamp: new Date().toISOString(),
            inputs,
            results,
        };

        try {
            await fs.promises.writeFile(filePath, JSON.stringify(dataToSave, null, 2));
            res.status(200).json({ message: 'Results saved successfully', id });
        } catch (error) {
            console.error('Failed to save results:', error);
            res.status(500).json({ message: 'Failed to save results' });
        }
    } else {
        res.setHeader('Allow', ['POST']);
        res.status(405).end(`Method ${req.method} Not Allowed`);
    }
}
